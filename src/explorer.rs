
use core::fmt::Debug;


/**
 * trait Section
 * can represent a bunch of paragraphs linked to a bunch of 
 * markdown titles 
 */
pub trait SectionDisplay {
    fn sectionDisplay(&self);

}

pub struct textSection {
    pub path: String,
    pub content: String, 
}

impl SectionDisplay for textSection {
    fn sectionDisplay(&self) {

    }
}

pub struct codeSection {
    pub path: String, 
    pub content: String, 
    pub language: String,
    pub copy: bool, 
}

impl SectionDisplay for codeSection {
    fn sectionDisplay(&self) {

    }
}

pub struct imageSection {
    pub path: String, 
    pub filename: String,
    pub image: Vec<i8>,
}

impl SectionDisplay for imageSection {
    fn sectionDisplay(&self) {

    }
}

impl Debug for dyn SectionDisplay {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{:?}", self.sectionDisplay())
    }
}

#[derive(Debug)]
pub struct Explorer {
    pub title : String,
    pub sections : Option<Vec<Box<dyn SectionDisplay>>>,

}

impl Explorer {
    pub fn new(&mut self, title: &str, sections: Option<Vec<Box<dyn SectionDisplay>>>) {
        self.title = title.to_string();
        self.sections = sections;
    }


    pub fn display(&mut self) {
        for section in self.sections.as_ref().unwrap().iter() {
            section.sectionDisplay();
        }
    }
}