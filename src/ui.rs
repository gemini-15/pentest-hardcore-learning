use std::iter;

use ratatui::{
    layout::{self, Alignment, Constraint, Layout}, prelude::*, style::{Color, Style}, symbols::{border::ROUNDED, line}, text::{self, Text}, widgets::{Block, BorderType, Borders, Paragraph}, Frame
};
use tui_textarea::{Input, Key, TextArea};

use crate::app::App;

fn centered_rect(percent_x: u16, percent_y: u16,r: Rect) -> Rect {
    let popup_layout = Layout::default()
      .direction(Direction::Vertical)
      .constraints([
        Constraint::Percentage((100 - percent_y) / 2),
        Constraint::Percentage(percent_y),
        Constraint::Percentage((100 - percent_y) / 2),
      ])
      .split(r);
  
    Layout::default()
      .direction(Direction::Horizontal)
      .constraints([
        Constraint::Percentage((100 - percent_x) / 2),
        Constraint::Percentage(percent_x),
        Constraint::Percentage((100 - percent_x) / 2),
      ])
      .split(popup_layout[1])[1]
  }

fn search_area_block(search_area: &mut TextArea<'_>) {
    search_area.set_cursor_line_style(Style::default());
    search_area.set_cursor_style(Style::default());
    search_area.set_block(
        Block::default()
            .borders(Borders::ALL)
            .border_set(ROUNDED)
            .style(Style::default().fg(Color::White))
            .title(" Input [Search] : ")
    );
}

fn result_area_block(result_area: &mut TextArea<'_>) {
    result_area.set_cursor_line_style(Style::default());
    result_area.set_cursor_style(Style::default());
    result_area.set_block(
        Block::default()
            .borders(Borders::ALL)
            .border_set(ROUNDED)
            .style(Style::default().fg(Color::Blue))
            .title(" Explore : ")
    );
}


/// Renderer function 
pub fn render(app: &mut App, frame: &mut Frame) {


    // let mut componentsArea = [TextArea::default(), TextArea::default()];
    let mut search_area = TextArea::default(); 
    search_area_block(&mut search_area);
    let mut result_area = TextArea::default();
    result_area_block(&mut result_area);

    let layout = Layout::default()
        .direction(layout::Direction::Vertical)
        .constraints([Constraint::Percentage(80), Constraint::Percentage(20)].as_ref());

    
    let chunks = layout.split(frame.size());

    let text_search_block = Paragraph::new(app.search_input.clone()).block(search_area.block().unwrap().clone());
    // let popup_search_area = centered_rect(60, 25, frame.size());
    frame.render_widget(text_search_block, chunks[1]);

    frame.render_widget(result_area.widget(), chunks[0]);


    // frame.render_widget(
    //     Paragraph::new(format!(
    //         "This is a tui template.\n\
    //             Press `Esc`, `Ctrl-C` or `q` to stop running.\n\
    //             Press left and right to increment and decrement the counter respectively.\n\
    //             Counter: {}",
    //         app.counter
    //     ))
    //     .block(
    //         Block::bordered()
    //             .title(" Pentest search engine ")
    //             .title_alignment(Alignment::Center)
    //             .border_type(BorderType::Double),
    //     )
    //     .style(Style::default().fg(Color::Green).bg(Color::Rgb(0, 0, 0)))
    //     .centered(),
    //     frame.size(),
    // )
}