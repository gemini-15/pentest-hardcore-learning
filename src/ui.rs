
use markdown::mdast::Heading;
use markdown::{
  mdast::Node
};
use pulldown_cmark::{Parser, Event, Tag};

use ratatui::{
    layout::{self, Constraint, Layout},
    style::{Color, Style}, 
    widgets::*, 
    Frame,
    prelude::*,
};
use tui_textarea::TextArea;

use crate::app::App;

fn centered_rect(percent_x: u16, percent_y: u16,r: Rect) -> Rect {
    let popup_layout = Layout::default()
      .direction(Direction::Vertical)
      .constraints([
        Constraint::Percentage((100 - percent_y) / 2),
        Constraint::Percentage(percent_y),
        Constraint::Percentage((100 - percent_y) / 2),
      ])
      .split(r);
  
    Layout::default()
      .direction(Direction::Horizontal)
      .constraints([
        Constraint::Percentage((100 - percent_x) / 2),
        Constraint::Percentage(percent_x),
        Constraint::Percentage((100 - percent_x) / 2),
      ])
      .split(popup_layout[1])[1]
  }

fn search_area_block(search_area: &mut TextArea<'_>) {
    search_area.set_cursor_line_style(Style::default());
    search_area.set_cursor_style(Style::default());
    search_area.set_block(
        Block::default()
            .borders(Borders::ALL)
            .style(Style::default().fg(Color::White))
            .title(" Input [Search] : ")
    );
}

fn result_area_block(result_area: &mut TextArea<'_>) {
    result_area.set_cursor_line_style(Style::default());
    result_area.set_cursor_style(Style::default());
    result_area.set_block(
        Block::default()
            .borders(Borders::ALL)
            .style(Style::default().fg(Color::DarkGray))
            .title(" Explorer : ")
    );
}


/// Renderer function 
pub fn render(app: &mut App, frame: &mut Frame) {
    let mut search_area = TextArea::default(); 
    search_area_block(&mut search_area);
    let mut result_area = TextArea::default();
    result_area_block(&mut result_area);
    
    /// Nodes debug
    let mut nodes = app.nodes.clone();
    let node_z = nodes.nodes[0].clone();
    let mut heading_string = String::new();
    let mut anything_else = String::new();
    match &node_z {
      Node::Heading(Heading) => {
        heading_string.push_str(node_z.to_string().as_str());
        println!("headings! {:?}", heading_string);

      }
      _ => {
        anything_else.push_str(node_z.to_string().as_str());
        println!("anything else : {:?}", anything_else);
      }
    }
    // let mut node_zero = node_z.children().unwrap();
    // let mut node = node_zero[0].children().unwrap()[0].to_string();
  

    let layout = Layout::default()
        .direction(layout::Direction::Vertical)
        .constraints([Constraint::Percentage(60), Constraint::Percentage(20)].as_ref());

    
    let chunks = layout.split(frame.size());


    let text_search_block = Paragraph::new(heading_string)
        .block(search_area.block().unwrap().clone());
    
    let scrollbar = Scrollbar::new(ScrollbarOrientation::VerticalRight)
        .begin_symbol(Some("↑"))
        .end_symbol(Some("↓"));


    let titles = app.explorer.get_titles();
    let text_explorer_list = List::new(titles)
                .block(result_area.block().unwrap().clone())
                .style(Style::default().fg(Color::White))
                .highlight_style(Style::default().add_modifier(Modifier::BOLD).fg(Color::Yellow).bg(Color::Blue))
                .highlight_symbol(">> ")
                .repeat_highlight_symbol(true)
                .direction(ListDirection::TopToBottom);
    // let popup_search_area = centered_rect(60, 25, frame.size());
    let mut state = ListState::default();
    state.select(Some(app.selection_explorer.clone() as usize));
    frame.render_widget(text_search_block, chunks[1]);
    frame.render_stateful_widget(
      text_explorer_list,
      chunks[0],
      &mut state,
    );

    // println!("{:?}", nodes.nodes.len());
    // let mut nodes_string = Vec::new();

    // for node in nodes {
    //   nodes_string.push(node.to_string())
    // }
    // let nodes_list = List::new(nodes_string)
    //             .block(result_area.block().unwrap().clone())
    //             .style(Style::default().fg(Color::White))
    //             .highlight_style(Style::default().add_modifier(Modifier::BOLD).fg(Color::Yellow).bg(Color::Blue))
    //             .highlight_symbol(">> ")
    //             .repeat_highlight_symbol(true)
    //             .direction(ListDirection::TopToBottom);
    // // let popup_search_area = centered_rect(60, 25, frame.size());
    // let mut state = ListState::default();
    // state.select(Some(app.selection_explorer.clone() as usize));
    // frame.render_stateful_widget(
    //   nodes_list,
    //   chunks[2],
    //   &mut state,
    // );

}