use ratatui::{
    layout::{self, Constraint, Layout},
    style::{Color, Style}, 
    widgets::*, 
    Frame,
    prelude::*,
};
use tui_textarea::{Input, Key, TextArea};

use crate::app::App;

fn centered_rect(percent_x: u16, percent_y: u16,r: Rect) -> Rect {
    let popup_layout = Layout::default()
      .direction(Direction::Vertical)
      .constraints([
        Constraint::Percentage((100 - percent_y) / 2),
        Constraint::Percentage(percent_y),
        Constraint::Percentage((100 - percent_y) / 2),
      ])
      .split(r);
  
    Layout::default()
      .direction(Direction::Horizontal)
      .constraints([
        Constraint::Percentage((100 - percent_x) / 2),
        Constraint::Percentage(percent_x),
        Constraint::Percentage((100 - percent_x) / 2),
      ])
      .split(popup_layout[1])[1]
  }

fn search_area_block(search_area: &mut TextArea<'_>) {
    search_area.set_cursor_line_style(Style::default());
    search_area.set_cursor_style(Style::default());
    search_area.set_block(
        Block::default()
            .borders(Borders::ALL)
            .style(Style::default().fg(Color::White))
            .title(" Input [Search] : ")
    );
}

fn result_area_block(result_area: &mut TextArea<'_>) {
    result_area.set_cursor_line_style(Style::default());
    result_area.set_cursor_style(Style::default());
    result_area.set_block(
        Block::default()
            .borders(Borders::ALL)
            .style(Style::default().fg(Color::DarkGray))
            .title(" Explore : ")
    );
}


/// Renderer function 
pub fn render(app: &mut App, frame: &mut Frame) {

    let mut search_area = TextArea::default(); 
    search_area_block(&mut search_area);
    let mut result_area = TextArea::default();
    result_area_block(&mut result_area);

    let layout = Layout::default()
        .direction(layout::Direction::Vertical)
        .constraints([Constraint::Percentage(80), Constraint::Percentage(20)].as_ref());

    
    let chunks = layout.split(frame.size());
    let vertical_scroll = 0;
    let text_search_block = Paragraph::new(app.search_input.clone())
        .block(search_area.block().unwrap().clone());
    
    // let scrollbar = Scrollbar::new(ScrollbarOrientation::VerticalRight)
    //     .begin_symbol(Some("↑"))
    //     .end_symbol(Some("↓"));

    // let mut scrollbar_state = ScrollbarState::new(app.search_input.len()).position(vertical_scroll);

    let area = frame.size();
    // println!("{:?}", app.explorer.clone());
    let titles = app.explorer.get_titles();
    let text_explorer_list = List::new(titles)
                .block(result_area.block().unwrap().clone())
                .style(Style::default().fg(Color::White))
                .highlight_style(Style::default().add_modifier(Modifier::ITALIC))
                .highlight_symbol(">>")
                .repeat_highlight_symbol(true)
                .direction(ListDirection::BottomToTop);
    // let popup_search_area = centered_rect(60, 25, frame.size());
    frame.render_widget(text_search_block, chunks[1]);
    // frame.render_stateful_widget(
    //   scrollbar,
    //   area.inner(&Margin {
    //       // using an inner vertical margin of 1 unit makes the scrollbar inside the block
    //       vertical: 1,
    //       horizontal: 0,
    //   }),
    //   &mut scrollbar_state,
    // );

    frame.render_widget(text_explorer_list, chunks[0]);


    // frame.render_widget(
    //     Paragraph::new(format!(
    //         "This is a tui template.\n\
    //             Press `Esc`, `Ctrl-C` or `q` to stop running.\n\
    //             Press left and right to increment and decrement the counter respectively.\n\
    //             Counter: {}",
    //         app.counter
    //     ))
    //     .block(
    //         Block::bordered()
    //             .title(" Pentest search engine ")
    //             .title_alignment(Alignment::Center)
    //             .border_type(BorderType::Double),
    //     )
    //     .style(Style::default().fg(Color::Green).bg(Color::Rgb(0, 0, 0)))
    //     .centered(),
    //     frame.size(),
    // )
}