use std::iter;

use ratatui::{
    layout::{self, Alignment, Constraint, Layout}, style::{Color, Style}, text::{self, Text}, widgets::{Block, BorderType, Borders, Paragraph}, Frame
};
use tui_textarea::{Input, Key, TextArea};

use crate::app::App;

fn search_area(searchArea: &mut TextArea<'_>) {
    searchArea.set_cursor_line_style(Style::default());
    searchArea.set_cursor_style(Style::default());
    searchArea.set_block(
        Block::default()
            .borders(Borders::ALL)
            .style(Style::default().fg(Color::White))
            .title(" Search : ")
    );
}

fn result_area(resultArea: &mut TextArea<'_>) {
    resultArea.set_cursor_line_style(Style::default());
    resultArea.set_cursor_style(Style::default());
    resultArea.set_block(
        Block::default()
            .borders(Borders::ALL)
            .style(Style::default().fg(Color::Green))
            .title(" Resulting tips and notes : ")
    );
}


/// Renders the user interface widgets.
pub fn render(app: &mut App, frame: &mut Frame) {


    let mut componentsArea = [TextArea::default(), TextArea::default()];
    search_area(&mut componentsArea[0]);
    result_area(&mut componentsArea[1]);

    let layout = Layout::default()
        .direction(layout::Direction::Vertical)
        .constraints([Constraint::Percentage(20), Constraint::Percentage(80)].as_ref());

    
    let chunks = layout.split(frame.size());

    for (area, chunk) in componentsArea.iter().zip(chunks.iter()) {
        // let widget = area.widget();
        let text_area = Paragraph::new(app.search_input.clone()).block(componentsArea[0].block().unwrap().clone());
        frame.render_widget(text_area, *chunk);
    }

    

    // frame.render_widget(
    //     Paragraph::new(format!(
    //         "This is a tui template.\n\
    //             Press `Esc`, `Ctrl-C` or `q` to stop running.\n\
    //             Press left and right to increment and decrement the counter respectively.\n\
    //             Counter: {}",
    //         app.counter
    //     ))
    //     .block(
    //         Block::bordered()
    //             .title(" Pentest search engine ")
    //             .title_alignment(Alignment::Center)
    //             .border_type(BorderType::Double),
    //     )
    //     .style(Style::default().fg(Color::Green).bg(Color::Rgb(0, 0, 0)))
    //     .centered(),
    //     frame.size(),
    // )
}