use std::io;

use crossterm::terminal;


mod tui;
mod event;
mod app;
fn main() -> io::Result<()> {
    // let 

    // stdout().execute(EnterAlternateScreen)?;
    // enable_raw_mode()?;
    // let mut terminal = Terminal::new(CrosstermBackend::new(stdout()))?;
    // terminal.clear()?;

    // loop {
    //     // UI draw
    //     terminal.draw(|frame| {
    //         let area = frame.size();
    //         frame.render_widget(
    //             Paragraph::new("Testing this terminal shit").light_green(), area);
    //     })?;

    //     // Handling events
    //     if event::poll(std::time::Duration::from_millis(16))? {
    //         if let event::Event::Key(key) = event::read()? {
    //             if key.kind == KeyEventKind::Press && key.code == KeyCode::Char('q')
    //             {
    //                 break;
    //             }
    //         }
    //     }
    // }

    // stdout().execute(LeaveAlternateScreen)?; 
    // disable_raw_mode()?;
    // Ok(())
}