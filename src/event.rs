use crossterm::event::{self, Event as CrosstermEvent, KeyEvent, MouseEvent};
use std::sync::mpsc;
use std::thread::{self, Thread};
use std::time::{Duration, Instant};
use crate::app::AppResult;


#[derive(Debug, Clone, Copy)]
pub enum Event {
    // Terminal Tick 
    Tick, 
    // Key press
    Key(KeyEvent), 
    // Mouse click 
    Mouse(MouseEvent),
    // Terminal resize
    Resize(u16, u16)
}

// Terminal event handler
#[allow(dead_code)]
#[derive(Debug)]
pub struct EventHandler {
    // Channel sender
    sender: mpsc::Sender<Event>,
    // Channel receiver
    receiver: mpsc::Receiver<Event>,
    // Event handler thread
    handler: thread::JoinHandle<()>,
}

impl EventHandler {
    // Constructor of EventHandler instance
    pub fn new(tick_rate: u64) -> Self {
        let tick_rate = Duration::from_millis(tick_rate);
        let (sender, receiver) = mpsc::channel();
        let handler = {
            let sender = sender.clone();
            thread::spawn(move || {
                let mut last_tick = Instant::now();
                loop {
                    let timeout = tick_rate
                        .checked_sub(last_tick.elapsed())
                        .unwrap_or(tick_rate);

                    if event::poll(timeout).expect("Failed to poll new events.") {
                        match event::read().expect("Unable to read event.") {
                            CrosstermEvent::FocusGained => Ok(()),
                            CrosstermEvent::FocusLost => Ok(()),
                            CrosstermEvent::Paste(_) => unimplemented!(),
                            CrosstermEvent::Key(e) => sender.send(Event::Key(e)),
                            CrosstermEvent::Mouse(e) => sender.send(Event::Mouse(e)),
                            CrosstermEvent::Resize(w,h) => sender.send(Event::Resize(w, h)),

                        }
                        .expect("Failed to send terminal event.");
                    }

                    if last_tick.elapsed() >= tick_rate {
                        sender.send(Event::Tick).expect("Failed to send tick event.");
                        last_tick = Instant::now();
                    }
                }
            })
        };

        Self {
            sender,
            receiver,
            handler
        }
    }

    pub fn next(&self) -> AppResult<Event> {
        Ok(self.receiver.recv()?)
    }
}