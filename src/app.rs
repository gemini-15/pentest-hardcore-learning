use std::{error, vec};
use crossterm::event::KeyCode;

use crate::{engine::TreeNodes, explorer::*};


pub type AppResult<T> = std::result::Result<T, Box<dyn error::Error>>;



pub struct App {
    pub running: bool,
    pub search_input: String,
    pub explorer: Explorer, 
    pub selection_explorer: u8,
    pub nodes: TreeNodes,
}

impl Default for App {
    fn default() -> Self {
        Self {
            running: true,
            search_input: String::new(),
            explorer: Explorer::new(),
            selection_explorer: 0, 
            nodes: TreeNodes::init(),
        }
    }
}

impl App {

    /// Initialize App
    /// 
    /// Initializes App and sets the structure to Default :
    /// App running 
    /// Search string to initialized
    /// Explorer to initialized 
    /// selection_explorer (keeps track of the item selected for the explorer)
    pub fn new() -> Self {
        Self::default()
    }

    /// Adding a character to the search input.
    /// 
    /// Adds a character into the search input when a key is pressed.
    pub fn pressed_key_search(&mut self, character: char) {
        self.search_input.push(character);
    }

    /// Removing character to the search input.
    /// 
    /// Removes a character from the search input with backspace is pressed.
    pub fn backspace_key_search(&mut self) {
        let _ = self.search_input.pop();
    }


    /// Updates the selection explorer when using Up and Down.
    pub fn update_selection_explorer(&mut self, keycode: KeyCode) {
        match keycode {
            KeyCode::Down => {
                if self.selection_explorer == self.explorer.len() as u8 - 1 {
                    self.selection_explorer = 0;
                }
                else {
                    self.selection_explorer += 1; 
                }
            } 
            KeyCode::Up => {
                if self.selection_explorer == 0 {
                    self.selection_explorer = self.explorer.len() as u8 - 1;
                }
                else {
                    self.selection_explorer -= 1;
                }
            }
            _ => {}
        }
    }


    /// 
    pub fn explorer_search(&mut self) {
        
    }

    /// Adds Directories to the explorer of components with empty sections. 
    /// 
    pub fn explorer_append_no_sections(&mut self, path: String) {
        let mut cleaned_path = path;
        if !(cleaned_path.contains("git") | cleaned_path.contains("src") | cleaned_path.contains("target")) {
            cleaned_path = cleaned_path.chars().filter(|&c| c != '/').collect();
            cleaned_path = cleaned_path.chars().filter(|&c| c != '.').collect();
            self.explorer.add(&cleaned_path, None);

        }
    }



    /// Empty the explorer. 
    pub fn empty_explorer(&mut self) {
        self.explorer.clear();
        self.selection_explorer = 0;
    }

    /// Handles the tick event of the terminal.
    pub fn tick(&self) {}

    /// Set running to false to quit the application.
    pub fn quit(&mut self) {
        self.running = false;
    }

}