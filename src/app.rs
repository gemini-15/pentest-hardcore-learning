use crossterm::{
    event::{self, KeyCode, KeyEventKind},
    terminal::{
        self, disable_raw_mode, enable_raw_mode, EnterAlternateScreen, LeaveAlternateScreen
    },
    ExecutableCommand
};
use ratatui::{
    prelude::{CrosstermBackend, Stylize, Terminal}, 
    widgets::Paragraph
};
use std::io::{stdout, Result}; 
use crate::tui;

impl App {
    async fn run(&mut self) -> Result<()> {
  
      let mut tui = tui::Tui::new()?
              .tick_rate(4.0) // 4 ticks per second
              .frame_rate(30.0); // 30 frames per second
  
      tui.enter()?; // Starts event handler, enters raw mode, enters alternate screen
  
      loop {
  
        tui.draw(|f| { // Deref allows calling `tui.terminal.draw`
          self.ui(f);
        })?;
  
        if let Some(evt) = tui.next().await { // `tui.next().await` blocks till next event
          let mut maybe_action = self.handle_event(evt);
          while let Some(action) = maybe_action {
            maybe_action = self.update(action);
          }
        };
  
        if self.should_quit {
          break;
        }
      }
  
      tui.exit()?; // stops event handler, exits raw mode, exits alternate screen
  
      Ok(())
    }
  }
