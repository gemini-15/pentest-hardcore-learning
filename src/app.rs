use std::{error, vec};
use crate::explorer::*;


pub type AppResult<T> = std::result::Result<T, Box<dyn error::Error>>;



pub struct App {
    pub running: bool,
    pub search_input: String,
    pub explorer: Explorer, 
}

impl Default for App {
    fn default() -> Self {
        Self {
            running: true,
            search_input: String::new(),
            explorer: Explorer::new(),
        }
    }
}

impl App {

    /// Initialize App
    /// 
    /// Initializes App and sets the structure to Default
    /// App running 
    /// Search string to initialized
    /// Explorer to initialized 
    pub fn new() -> Self {
        Self::default()
    }

    
    pub fn pressed_key_search(&mut self, character: char) {
        self.search_input.push(character);
    }

    pub fn backspace_key_search(&mut self) {
        let _ = self.search_input.pop();
    }

    pub fn explorer_append_no_sections(&mut self, path: String) {
        let mut cleaned_path = path;
        if !cleaned_path.contains("git") {
            cleaned_path = cleaned_path.chars().filter(|&c| c != '/').collect();
            cleaned_path = cleaned_path.chars().filter(|&c| c != '.').collect();
            self.explorer.add(&cleaned_path, None);

        }
    }

    // Empty vec 
    pub fn empty_explorer(&mut self) {
        self.explorer.clear();
    }

    /// Handles the tick event of the terminal.
    pub fn tick(&self) {}

    /// Set running to false to quit the application.
    pub fn quit(&mut self) {
        self.running = false;
    }

}