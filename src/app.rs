use std::error;


pub type AppResult<T> = std::result::Result<T, Box<dyn error::Error>>;

pub struct App {
    /// Is the application running?
    pub running: bool,
    /// counter
    pub counter: u8,
    // pub searchinput: TextArea<'a>,
    pub search_input: String,
}

impl Default for App {
    fn default() -> Self {
        Self {
            running: true,
            counter: 0,
            search_input: String::new()
            // searchinput: TextArea::default()
        }
    }
}

impl App {
    pub fn new() -> Self {
        Self::default()
    }

    // pub fn setTextArea(&self, style: Style) {
    //     self.searchinput.set_cursor_line_style(style);
    //     self.searchinput.set_block(
    //         Block::default()
    //     )
    // }
    pub fn pressed_key_search(&self, character: &str) {

    }

    /// Handles the tick event of the terminal.
    pub fn tick(&self) {}

    /// Set running to false to quit the application.
    pub fn quit(&mut self) {
        self.running = false;
    }

    pub fn increment_counter(&mut self) {
        if let Some(res) = self.counter.checked_add(1) {
            self.counter = res;
        }
    }

    pub fn decrement_counter(&mut self) {
        if let Some(res) = self.counter.checked_sub(1) {
            self.counter = res;
        }
    }
}