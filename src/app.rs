use std::{error, vec};


pub type AppResult<T> = std::result::Result<T, Box<dyn error::Error>>;

#[derive(Debug)]
struct content {
    
}


pub struct App {
    pub running: bool,
    pub search_input: String,
    pub explorer: Vec<String>, 
}

impl Default for App {
    fn default() -> Self {
        Self {
            running: true,
            search_input: String::new(),
            explorer: Vec::new()
        }
    }
}

impl App {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn pressed_key_search(&mut self, character: char) {
        self.search_input.push(character);
    }

    pub fn backspace_key_search(&mut self) {
        let _ = self.search_input.pop();
    }

    pub fn add_path_to_explorer(&mut self, path: String) {
        self.explorer.push(path);
    }

    // Empty vec 
    pub fn empty_explorer(&mut self) {
        self.explorer.clear();
    }

    /// Handles the tick event of the terminal.
    pub fn tick(&self) {}

    /// Set running to false to quit the application.
    pub fn quit(&mut self) {
        self.running = false;
    }

}