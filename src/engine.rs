use crate::app::{
    App, 
    AppResult
};
use std::{
    fs::{read_dir, File}, 
    io::Read, 
    path::{Path}
};
use markdown::{
    to_mdast,
    mdast::Node
};

#[derive(Debug, Clone)]
pub struct TreeNodes {
    pub nodes: Vec<Node>,
    
}

impl TreeNodes {
    /// Initializes the TreeNodes object
    pub fn init() -> Self {
        TreeNodes {
            nodes: Vec::new()
        }
    }

    /// Preprocess file and adds markdown nodes into 
    /// the treeNodes vector. 
    pub fn preprocess_file(&mut self, filename: &Path) {
        self.nodes.push(parse_md_to_nodes(filename).unwrap());
    }

    /// Extracts all Headings in nodes
    /// 
    pub fn extract_headings(&mut self, search_query: &str) -> AppResult<Vec<String>> {
        let mut headings = Vec::new();
        
        // for node in self.nodes {
        //     continue;
        // }
        let header_test = String::from("hello");
        headings.push(header_test);

        Ok(headings)
    }

}

impl Iterator for TreeNodes {
    type Item = Node;

    fn next(&mut self) -> Option<Self::Item> {
        self.nodes.pop()
    }
}



/// Parses a Markdown file into Multiple nodes. 
/// 
fn parse_md_to_nodes(filename: &Path) -> AppResult<Node> {
    let mut file = match File::open(&filename) {
        Err(e) => panic!("{} => couldn't open file : {}",e, filename.display()),
        Ok(file) => file
    };  

    let mut s = String::new();

    match file.read_to_string(&mut s) {
        Err(e) => panic!("{} => couldn't read file : {}",e, filename.display()),
        Ok(_) => println!("File read.")
    }
    Ok(to_mdast(&s, &markdown::ParseOptions::default())?)


}


pub fn preprocess(app: &mut App, current_dir: &Path) -> AppResult<()> {
    println!("{:?}",current_dir);
    if current_dir.is_dir() {
        for entry in read_dir(current_dir)? {
            let entry = entry?;
            let path = entry.path();
            if path.is_dir() {
                preprocess(app, &path)?;
            } else if path.to_str().unwrap().contains(".md") {
                app.nodes.preprocess_file(&path);
            }

        }
    } else {
        app.nodes.preprocess_file(&current_dir);
    }

    Ok(())
}
