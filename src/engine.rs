use crate::app::{self, App, AppResult};
use std::{fs::{self, read_dir, File}, io::Read, path::{Path, PathBuf}};
use markdown::{
    to_mdast,
    mdast::Node
};


pub struct TreeNodes {
    nodes: Vec<Node>,
    
}

impl TreeNodes {
    /// Initializes the TreeNodes object
    fn init() -> Self {
        TreeNodes {
            nodes: Vec::new()
        }
    }

    /// Preprocess file and adds markdown nodes into 
    /// the treeNodes vector. 
    fn preprocess_file(&mut self, filename: &Path) {
        self.nodes.push(parse_md_to_nodes(filename).unwrap());
    }

}



/// Parses a Markdown file into Multiple nodes. 
/// 
fn parse_md_to_nodes(filename: &Path) -> AppResult<Node> {
    let mut file = match File::open(&filename) {
        Err(e) => panic!("{} => couldn't open file : {}",e, filename.display()),
        Ok(file) => file
    };  

    let mut s = String::new();
    match file.read_to_string(&mut s) {
        Err(e) => panic!("{} => couldn't read file : {}",e, filename.display()),
        Ok(_) => println!("File read.")
    }

    Ok(to_mdast(&s, &markdown::ParseOptions::default())?)
}


pub fn preprocess(app: &mut App, current_dir: &Path, tree_nodes: &mut TreeNodes) -> AppResult<()> {
    if current_dir.is_dir() {
        for entry in read_dir(current_dir)? {
            let entry = entry?;
            let path = entry.path();
            if path.is_dir() {
                preprocess(app, &path, tree_nodes)?;
            } else {
                tree_nodes.preprocess_file(&path);
            }
        }
    }
    
    Ok(())
}
