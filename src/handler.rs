use crate::app::{App, AppResult};
use crossterm::event::{KeyCode, KeyEvent, KeyModifiers};
use std::fs;

pub fn handle_explorer(app: &mut App) -> AppResult<()> {   
    let paths = fs::read_dir("./")?;
    for path in paths {
        // println!("{:?}", path.unwrap().path().display().to_string());
        // app.add_path_to_explorer(path.unwrap().path().display().to_string());
    }
    Ok(())
}


/// Handles the key events and updates the state of [`App`].
pub fn handle_key_events(key_event: KeyEvent, app: &mut App) -> AppResult<()> {
    match key_event.code {
        // // Exit application on `ESC` or `q`
        // KeyCode::Esc => {
        //     app.quit();
        // }
        // Exit application on `Ctrl-C`
        KeyCode::Char('c') | KeyCode::Char('C') => {
            if key_event.modifiers == KeyModifiers::CONTROL {
                app.quit();
            }
            else {
                if KeyCode::Char('c') == key_event.code {
                    app.pressed_key_search('c');
                }
                else {
                    app.pressed_key_search('C');
                }
            }
        }
        KeyCode::Char(value) => {
            app.pressed_key_search(value);
        }
        KeyCode::Backspace => {
            app.backspace_key_search();
        }

        _ => {}
    }
    Ok(())
}