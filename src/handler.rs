use crate::app::{App, AppResult};
use crossterm::event::{KeyCode, KeyEvent, KeyModifiers};
use std::{fs, path::PathBuf};


/// Explorer handler and updates the state of `App`
/// 
/// 
/// 
pub fn handle_init_explorer(app: &mut App, dir: PathBuf) -> AppResult<()> {   
    for entry in fs::read_dir(dir)?{
        let entry = entry?;
        let path = entry.path();
        let metadata = fs::metadata(&path)?;
        if metadata.is_dir() {
            app.explorer_append_no_sections(path.display().to_string());
        }
    }
    Ok(())
}

///
/// 
/// 
// pub fn handle_selection_explorer(app: &mut App, selection: )



pub fn handle_search_query(app: &mut App, query: &str) -> AppResult<()> {

    Ok(())
}


/// Handles the key events and updates the state of [`App`].
pub fn handle_key_events(key_event: KeyEvent, app: &mut App) -> AppResult<()> {
    match key_event.code {
        // // Exit application on `ESC` or `q`
        // KeyCode::Esc => {
        //     app.quit();
        // }
        // Exit application on `Ctrl-C`
        KeyCode::Char('c') | KeyCode::Char('C') => {
            if key_event.modifiers == KeyModifiers::CONTROL {
                app.quit();
            }
            else {
                if KeyCode::Char('c') == key_event.code {
                    app.pressed_key_search('c');
                }
                else {
                    app.pressed_key_search('C');
                }
            }
        }
        KeyCode::Char(value) => {
            app.pressed_key_search(value);
        }
        KeyCode::Backspace => {
            app.backspace_key_search();
        }
        KeyCode::Down => {
            app.update_selection_explorer(KeyCode::Down);
        }
        KeyCode::Up => {
            app.update_selection_explorer(KeyCode::Up);
        }
        KeyCode::Enter => {
            app.explorer_search();
        }
        _ => {}
    }
    Ok(())
}